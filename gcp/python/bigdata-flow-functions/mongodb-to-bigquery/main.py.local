## Set variable if Use
# pip install -r requirement.txt
# export PROJECT_ID="<project id>"
# export REGION="<region>"
# export SHARED_VPC="<vpc>"
# export SUBNET_SHARE="<subnet-share>"
# export SERVICE_ACCOUNT_EMAIL="<service_account>"

import os
from googleapiclient.discovery import build
from oauth2client.client import GoogleCredentials

def start_dataflow():
    # Retrieve environment variables
    PROJECT_ID = os.environ.get('PROJECT_ID')
    REGION = os.environ.get('REGION')
    SHARED_VPC = os.environ.get('SHARED_VPC')
    SUBNET_SHARE = os.environ.get('SUBNET_SHARE')
    SERVICE_ACCOUNT_EMAIL = os.environ.get('SERVICE_ACCOUNT_EMAIL')

    # Initialize authentication for Google Cloud SDK
    credentials = GoogleCredentials.get_application_default()

    # Create API client for Dataflow service
    service = build('dataflow', 'v1b3', credentials=credentials)

    # Set parameters for Dataflow job
    job_parameters = {
        "launchParameter": {
            "jobName": "mongodb-to-bigquery-job",
            "parameters": {
                "mongoDbUri": "mongodb://mongo:somaz@44.44.44.444:27017", # mongodb://<id>:<pw>@<ip>:<port>
                "database": "dev1",
                "collection": "mongologs",
                "outputTableSpec": f"{PROJECT_ID}:mongodb_dataset.mongodb-internal-table", # <dataset_name>.<table_name>
                "userOption": "FLATTEN"
            },
            "environment": {
                "tempLocation": "gs://mongodb-bigquery-storage/tmp",  
                "network": SHARED_VPC,
                "subnetwork": f"regions/{REGION}/subnetworks/{SUBNET_SHARE}-mgmt-b",
                "serviceAccountEmail": SERVICE_ACCOUNT_EMAIL
            },
            "containerSpecGcsPath": 'gs://dataflow-templates/2023-08-29-00_RC00/flex/MongoDB_to_BigQuery'
        }
    }

    # Error handling
    try:
        # Start Dataflow job
        request = service.projects().locations().flexTemplates().launch(
            projectId=PROJECT_ID,
            location=REGION,
            body=job_parameters
        )
        response = request.execute()
        print(response)
        return response

    except Exception as e:
        print(f"Error occurred: {e}")
        return f"Error: {e}", 500

if __name__ == "__main__":
    start_dataflow()


